x-logging:
  &default-logging
  logging:
    driver: json-file
    options:
      max-size: 100M

services:
  nginx:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    container_name: proxy
    ports:
      - "80:80" # Expose port 80 to the host
    depends_on: # ensure that every other service is up before starting the proxy
     - frontend
     - backend
     - server
     - workers
     - db
     - redis
    networks:
      - app-network
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
      args:
        BACKEND_PORT: ${BACKEND_PORT}
        CORS_ORIGIN: ${CORS_ORIGIN}
        OAUTH_CLIENT_ID: ${OAUTH_CLIENT_ID}
        OAUTH_CLIENT_SECRET: ${OAUTH_CLIENT_SECRET}
        JWT_TOKEN_TIMEOUT: ${JWT_TOKEN_TIMEOUT}
        JWT_SECRET: ${JWT_SECRET}
        ADMIN_EMAIL: ${ADMIN_EMAIL}
        JUDGE0_URL: ${JUDGE0_URL}
        DB_USERNAME: ${DB_USERNAME}
        DB_PASSWORD: ${DB_PASSWORD}
        CLUSTER_ADDRESS: ${CLUSTER_ADDRESS}
    expose:
      - "${BACKEND_PORT}" # only expose the port BACKEND_PORT to app-network (not to the host)
    environment:
      - BACKEND_PORT=${BACKEND_PORT}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
      - JWT_TOKEN_TIMEOUT=${JWT_TOKEN_TIMEOUT}
      - JWT_SECRET=${JWT_SECRET}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - JUDGE0_URL=${JUDGE0_URL}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - CLUSTER_ADDRESS=${CLUSTER_ADDRESS}
    networks:
      - app-network
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
      args:
        FRONTEND_PORT: ${FRONTEND_PORT}
        OAUTH_CLIENT_ID: ${OAUTH_CLIENT_ID}
        BACKEND_PORT: ${BACKEND_PORT}
    expose:
      - "${FRONTEND_PORT}" # only expose the port FRONTEND_PORT to app-network (not to the host)
    environment:
      - PORT=${FRONTEND_PORT} # Set the PORT environment variable to the FRONTEND_PORT value so that the React app listens on FRONTEND_PORT
      - REACT_APP_OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - REACT_APP_BASE_URL=http://localhost/api
    networks:
      - app-network
  # Judge0 services
  server:
    image: judge0/judge0:1.13.1-extra
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./judge0.conf:/judge0.conf:ro # Mount your judge0.conf file
    expose:
      - "2358" # only expose the port 2358 to app-network (not to the host)
    privileged: true
    <<: *default-logging
    restart: always
    networks:
      - app-network
  workers:
    image: judge0/judge0:1.13.1-extra
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["./scripts/workers"]
    volumes:
      - ./judge0.conf:/judge0.conf:ro # Mount your judge0.conf file
    privileged: true
    <<: *default-logging
    restart: always
    networks:
      - app-network
  db:
    image: postgres:16.2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 3
    env_file: ./judge0.conf
    volumes:
      - judge0-data:/var/lib/postgresql/data/
    <<: *default-logging
    restart: always
    networks:
      - app-network
  redis:
    image: redis:7.2.4
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    command: [
      "bash", "-c",
      'docker-entrypoint.sh --appendonly no --requirepass "$$REDIS_PASSWORD"'
    ]
    env_file: ./judge0.conf
    <<: *default-logging
    restart: always
    networks:
      - app-network

volumes:
  judge0-data:

networks:
  app-network:
    driver: bridge