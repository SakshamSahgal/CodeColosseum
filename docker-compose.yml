x-logging: &default-logging
  logging:
    driver: json-file
    options:
      max-size: 100M

services:

  codecolosseum:
    build:
      args:
        BACKEND_PORT: ${BACKEND_PORT}
        CORS_ORIGIN: ${CORS_ORIGIN}
        OAUTH_CLIENT_ID: ${OAUTH_CLIENT_ID}
        OAUTH_CLIENT_SECRET: ${OAUTH_CLIENT_SECRET}
        JWT_TOKEN_TIMEOUT: ${JWT_TOKEN_TIMEOUT}
        JWT_SECRET: ${JWT_SECRET}
        ADMIN_EMAIL: ${ADMIN_EMAIL}
        JUDGE0_URL: ${JUDGE0_URL}
        DB_USERNAME: ${DB_USERNAME}
        DB_PASSWORD: ${DB_PASSWORD}
        CLUSTER_ADDRESS: ${CLUSTER_ADDRESS}
        DOMAIN: ${DOMAIN}
      dockerfile: Dockerfile
    environment:
      - BACKEND_PORT=${BACKEND_PORT}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID} # Set the OAUTH_CLIENT_ID for Backend
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
      - JWT_TOKEN_TIMEOUT=${JWT_TOKEN_TIMEOUT}
      - JWT_SECRET=${JWT_SECRET}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - JUDGE0_URL=${JUDGE0_URL} # URL used by the Backend to make requests to Judge0
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - CLUSTER_ADDRESS=${CLUSTER_ADDRESS}
      - REACT_APP_OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID} # Set the OAUTH_CLIENT_ID for Frontend
      - REACT_APP_BASE_URL=${DOMAIN} # BASE URL used by the React app/Host to make requests to the backend
    ports:
      - "80:${BACKEND_PORT}" # map the port BACKEND_PORT to port 80 on the host
    networks:
      - app-network

  # Judge0 services
  server:
    image: judge0/judge0:1.13.1
    volumes:
      - ./judge0.conf:/judge0.conf:ro
    expose:
      - "2358" # only expose the port 2358 to app-network (not to the host)
    privileged: true
    <<: *default-logging
    restart: always
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
        
  workers:
    image: judge0/judge0:1.13.1
    command: [ "./scripts/workers" ]
    volumes:
      - ./judge0.conf:/judge0.conf:ro
    privileged: true
    <<: *default-logging
    restart: always
    networks:
      - app-network

  db:
    image: postgres:16.2
    env_file: judge0.conf
    volumes:
      - data:/var/lib/postgresql/data/
    <<: *default-logging
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7.2.4
    command: [ "bash", "-c", 'docker-entrypoint.sh --appendonly no --requirepass "$$REDIS_PASSWORD"' ]
    env_file: judge0.conf
    <<: *default-logging
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  data:


networks:
  app-network:
    driver: bridge
